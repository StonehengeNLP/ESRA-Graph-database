{
    "swagger": "2.0",
    "info": {
        "description": "This is a documentation of Graph Database Manager APIs, a part of ESRA project",
        "version": "1.0.5",
        "title": "ESRA Graph Database Manager",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "plw.hwm@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:8000",
    "basePath": "/",
    "tags": [
        {
            "name": "Graph Database",
            "description": "Graph database management"
        }
    ],
    "schemes": [
        "http"
    ],
    "paths": {
        "/complete": {
            "get": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "Autocompletion",
                "operationId": "autocompletion",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "query keywords",
                        "required": true,
                        "example": "bert"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        },
        "/explain": {
            "post": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "Explain the given papers from the query keyword",
                "operationId": "explain",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "keyword and papers",
                        "required": true,
                        "properties": {
                            "keyword": {
                                "type": "string",
                                "example": "bert"
                            },
                            "papers": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
                                    "ALBERT: A Lite BERT for Self-supervised Learning of Language Representations"
                                ]
                            },
                            "abstracts": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "We introduce a new language representation model called BERT, which stands for Bidirectional Encoder Representations from Transformers. Unlike recent language representation models (Peters et al., 2018a; Radford et al., 2018), BERT is designed to pre-train deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a result, the pre-trained BERT model can be fine-tuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial task-specific architecture modifications. BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art results on eleven natural language processing tasks, including pushing the GLUE score to 80.5 (7.7 point absolute improvement), MultiNLI accuracy to 86.7% (4.6% absolute improvement), SQuAD v1.1 question answering Test F1 to 93.2 (1.5 point absolute improvement) and SQuAD v2.0 Test F1 to 83.1 (5.1 point absolute improvement).",
                                    "Increasing model size when pretraining natural language representations often results in improved performance on downstream tasks. However, at some point further model increases become harder due to GPU/TPU memory limitations, longer training times, and unexpected model degradation. To address these problems, we present two parameter-reduction techniques to lower memory consumption and increase the training speed of BERT. Comprehensive empirical evidence shows that our proposed methods lead to models that scale much better compared to the original BERT. We also use a self-supervised loss that focuses on modeling inter-sentence coherence, and show it consistently helps downstream tasks with multi-sentence inputs. As a result, our best model establishes new state-of-the-art results on the GLUE, RACE, and SQuAD benchmarks while having fewer parameters compared to BERT-large."
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        },
        "/preprocess": {
            "post": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "Extract keywords from the given text",
                "operationId": "preprocess",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "text or sentence",
                        "required": true,
                        "properties": {
                            "text": {
                                "type": "string",
                                "example": "bert attention natural language processing"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        },
        "/facts": {
            "get": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "List of facts",
                "operationId": "facts",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "query keywords",
                        "required": true,
                        "example": "bert"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        },
        "/graph": {
            "get": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "Graph for visualization",
                "operationId": "graph",
                "parameters": [
                    {
                        "name": "paper_title",
                        "in": "query",
                        "description": "Title of the paper",
                        "required": true,
                        "example": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Expected number of relations",
                        "required": false,
                        "example": "30"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        },
        "/kwGraph": {
            "get": {
                "tags": [
                    "Graph Database"
                ],
                "summary": "Graph path(kw->paper) for visualization",
                "operationId": "kwGraph",
                "parameters": [
                    {
                        "name": "keys",
                        "in": "query",
                        "description": "Search keywords",
                        "required": true,
                        "example": "bert"
                    },
                    {
                        "name": "paper_title",
                        "in": "query",
                        "description": "Title of the paper",
                        "required": true,
                        "example": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Expected number of relations",
                        "required": false,
                        "example": "30"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Missing parameter"
                    },
                    "503": {
                        "description": "Service unavailable"
                    }
                }
            }
        }
    },
    "securitySchemes": {
        "cookieAuth": {
            "type": "apiKey",
            "in": "cookie",
            "name": "SigToken"
        }
    },
    "definitions": {
        "user": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}